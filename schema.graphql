"""
 A keystone list
"""
type Post {
  id: ID!
  title: String
  slug: String
  content: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_in: [String]
  title_not_in: [String]
  slug: String
  slug_not: String
  slug_contains: String
  slug_not_contains: String
  slug_in: [String]
  slug_not_in: [String]
  content: String
  content_not: String
  content_contains: String
  content_not_contains: String
  content_in: [String]
  content_not_in: [String]
}

input PostWhereUniqueInput {
  id: ID
}

enum SortPostsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  slug: String
  content: String
}

input PostsUpdateInput {
  id: ID!
  data: PostUpdateInput
}

input PostCreateInput {
  title: String
  slug: String
  content: String
}

input PostsCreateInput {
  data: PostCreateInput
}

"""
 A keystone list
"""
type Experience {
  id: ID!
  title: String
  employmentType: String
  location: String
  startDate: String
  endDate: String
  description: String
  image: ImageFieldOutput
  skills(
    where: SkillWhereInput! = {}
    search: String
    sortBy: [SortSkillsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SkillOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Skill!]
  _skillsMeta(
    where: SkillWhereInput! = {}
    search: String
    sortBy: [SortSkillsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SkillOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use skillsCount instead."
    )
  skillsCount(where: SkillWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type _QueryMeta {
  count: Int
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_in: [String]
  title_not_in: [String]
  employmentType: String
  employmentType_not: String
  employmentType_in: [String]
  employmentType_not_in: [String]
  location: String
  location_not: String
  location_contains: String
  location_not_contains: String
  location_in: [String]
  location_not_in: [String]
  startDate: String
  startDate_not: String
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_in: [String]
  startDate_not_in: [String]
  endDate: String
  endDate_not: String
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_in: [String]
  endDate_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_in: [String]
  description_not_in: [String]

  """
   condition must be true for all nodes
  """
  skills_every: SkillWhereInput

  """
   condition must be true for at least 1 node
  """
  skills_some: SkillWhereInput

  """
   condition must be false for all nodes
  """
  skills_none: SkillWhereInput
}

input ExperienceWhereUniqueInput {
  id: ID
}

enum SortExperiencesBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  employmentType_ASC
  employmentType_DESC
  location_ASC
  location_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  description_ASC
  description_DESC
}

input ExperienceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  employmentType: OrderDirection
  location: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  description: OrderDirection
}

input ExperienceUpdateInput {
  title: String
  employmentType: String
  location: String
  startDate: String
  endDate: String
  description: String
  image: ImageFieldInput
  skills: SkillRelateToManyInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input SkillRelateToManyInput {
  create: [SkillCreateInput]
  connect: [SkillWhereUniqueInput]
  disconnect: [SkillWhereUniqueInput]
  disconnectAll: Boolean
}

input ExperiencesUpdateInput {
  id: ID!
  data: ExperienceUpdateInput
}

input ExperienceCreateInput {
  title: String
  employmentType: String
  location: String
  startDate: String
  endDate: String
  description: String
  image: ImageFieldInput
  skills: SkillRelateToManyInput
}

input ExperiencesCreateInput {
  data: ExperienceCreateInput
}

"""
 A keystone list
"""
type Skill {
  id: ID!
  title: String
  colorScheme: String
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_in: [String]
  title_not_in: [String]
  colorScheme: String
  colorScheme_not: String
  colorScheme_in: [String]
  colorScheme_not_in: [String]
}

input SkillWhereUniqueInput {
  id: ID
}

enum SortSkillsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  colorScheme_ASC
  colorScheme_DESC
}

input SkillOrderByInput {
  id: OrderDirection
  title: OrderDirection
  colorScheme: OrderDirection
}

input SkillUpdateInput {
  title: String
  colorScheme: String
}

input SkillsUpdateInput {
  id: ID!
  data: SkillUpdateInput
}

input SkillCreateInput {
  title: String
  colorScheme: String
}

input SkillsCreateInput {
  data: SkillCreateInput
}

"""
 A keystone list
"""
type Education {
  id: ID!
  title: String
  enrollmentYear: String
  graduationYear: String
  location: String
  image: ImageFieldOutput
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_in: [String]
  title_not_in: [String]
  enrollmentYear: String
  enrollmentYear_not: String
  enrollmentYear_contains: String
  enrollmentYear_not_contains: String
  enrollmentYear_in: [String]
  enrollmentYear_not_in: [String]
  graduationYear: String
  graduationYear_not: String
  graduationYear_contains: String
  graduationYear_not_contains: String
  graduationYear_in: [String]
  graduationYear_not_in: [String]
  location: String
  location_not: String
  location_contains: String
  location_not_contains: String
  location_in: [String]
  location_not_in: [String]
}

input EducationWhereUniqueInput {
  id: ID
}

enum SortEducationsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  enrollmentYear_ASC
  enrollmentYear_DESC
  graduationYear_ASC
  graduationYear_DESC
  location_ASC
  location_DESC
}

input EducationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  enrollmentYear: OrderDirection
  graduationYear: OrderDirection
  location: OrderDirection
}

input EducationUpdateInput {
  title: String
  enrollmentYear: String
  graduationYear: String
  location: String
  image: ImageFieldInput
}

input EducationsUpdateInput {
  id: ID!
  data: EducationUpdateInput
}

input EducationCreateInput {
  title: String
  enrollmentYear: String
  graduationYear: String
  location: String
  image: ImageFieldInput
}

input EducationsCreateInput {
  data: EducationCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single Post item.
  """
  createPost(data: PostCreateInput): Post

  """
   Create multiple Post items.
  """
  createPosts(data: [PostsCreateInput]): [Post]

  """
   Update a single Post item by ID.
  """
  updatePost(id: ID!, data: PostUpdateInput): Post

  """
   Update multiple Post items by ID.
  """
  updatePosts(data: [PostsUpdateInput]): [Post]

  """
   Delete a single Post item by ID.
  """
  deletePost(id: ID!): Post

  """
   Delete multiple Post items by ID.
  """
  deletePosts(ids: [ID!]): [Post]

  """
   Create a single Experience item.
  """
  createExperience(data: ExperienceCreateInput): Experience

  """
   Create multiple Experience items.
  """
  createExperiences(data: [ExperiencesCreateInput]): [Experience]

  """
   Update a single Experience item by ID.
  """
  updateExperience(id: ID!, data: ExperienceUpdateInput): Experience

  """
   Update multiple Experience items by ID.
  """
  updateExperiences(data: [ExperiencesUpdateInput]): [Experience]

  """
   Delete a single Experience item by ID.
  """
  deleteExperience(id: ID!): Experience

  """
   Delete multiple Experience items by ID.
  """
  deleteExperiences(ids: [ID!]): [Experience]

  """
   Create a single Skill item.
  """
  createSkill(data: SkillCreateInput): Skill

  """
   Create multiple Skill items.
  """
  createSkills(data: [SkillsCreateInput]): [Skill]

  """
   Update a single Skill item by ID.
  """
  updateSkill(id: ID!, data: SkillUpdateInput): Skill

  """
   Update multiple Skill items by ID.
  """
  updateSkills(data: [SkillsUpdateInput]): [Skill]

  """
   Delete a single Skill item by ID.
  """
  deleteSkill(id: ID!): Skill

  """
   Delete multiple Skill items by ID.
  """
  deleteSkills(ids: [ID!]): [Skill]

  """
   Create a single Education item.
  """
  createEducation(data: EducationCreateInput): Education

  """
   Create multiple Education items.
  """
  createEducations(data: [EducationsCreateInput]): [Education]

  """
   Update a single Education item by ID.
  """
  updateEducation(id: ID!, data: EducationUpdateInput): Education

  """
   Update multiple Education items by ID.
  """
  updateEducations(data: [EducationsUpdateInput]): [Education]

  """
   Delete a single Education item by ID.
  """
  deleteEducation(id: ID!): Education

  """
   Delete multiple Education items by ID.
  """
  deleteEducations(ids: [ID!]): [Education]
}

type Query {
  """
   Search for all Post items which match the where clause.
  """
  allPosts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]

  """
   Search for the Post item with the matching ID.
  """
  Post(where: PostWhereUniqueInput!): Post

  """
   Perform a meta-query on all Post items which match the where clause.
  """
  _allPostsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int

  """
   Search for all Experience items which match the where clause.
  """
  allExperiences(
    where: ExperienceWhereInput! = {}
    search: String
    sortBy: [SortExperiencesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExperienceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Experience!]

  """
   Search for the Experience item with the matching ID.
  """
  Experience(where: ExperienceWhereUniqueInput!): Experience

  """
   Perform a meta-query on all Experience items which match the where clause.
  """
  _allExperiencesMeta(
    where: ExperienceWhereInput! = {}
    search: String
    sortBy: [SortExperiencesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExperienceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use experiencesCount instead."
    )
  experiencesCount(where: ExperienceWhereInput! = {}): Int

  """
   Search for all Skill items which match the where clause.
  """
  allSkills(
    where: SkillWhereInput! = {}
    search: String
    sortBy: [SortSkillsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SkillOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Skill!]

  """
   Search for the Skill item with the matching ID.
  """
  Skill(where: SkillWhereUniqueInput!): Skill

  """
   Perform a meta-query on all Skill items which match the where clause.
  """
  _allSkillsMeta(
    where: SkillWhereInput! = {}
    search: String
    sortBy: [SortSkillsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SkillOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use skillsCount instead."
    )
  skillsCount(where: SkillWhereInput! = {}): Int

  """
   Search for all Education items which match the where clause.
  """
  allEducations(
    where: EducationWhereInput! = {}
    search: String
    sortBy: [SortEducationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [EducationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Education!]

  """
   Search for the Education item with the matching ID.
  """
  Education(where: EducationWhereUniqueInput!): Education

  """
   Perform a meta-query on all Education items which match the where clause.
  """
  _allEducationsMeta(
    where: EducationWhereInput! = {}
    search: String
    sortBy: [SortEducationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [EducationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use educationsCount instead."
    )
  educationsCount(where: EducationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
